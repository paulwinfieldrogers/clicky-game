{"version":3,"sources":["components/cowcard/CowCard.js","components/UserInfo/UserInfo.js","components/Container/Container.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["CowCard","props","react_default","a","createElement","className","onClick","selectCow","breed","alt","src","image","UserInfo","message","indexOf","style","color","yourScore","highScore","Container","children","NavBar","class","App","state","cows","unselectedCows","shuffleArray","array","i","length","j","Math","floor","random","_ref","undefined","_this","find","item","setState","newCows","filter","type","_this2","this","components_Container_Container","Navbar","components_UserInfo_UserInfo","map","cowcard_CowCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k3BAiBeA,SAbC,SAAAC,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,KAAGE,QAAS,kBAAML,EAAMM,UAAUN,EAAMO,SAEpCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYI,IAAKR,EAAMO,MAAOE,IAAKT,EAAMU,oBCUzDC,EAjBE,SAAAX,GAAK,OAClBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BACVH,EAAAC,EAAAC,cAAA,MACIC,WAAqD,IAA1CJ,EAAMY,QAAQC,QAAQ,eAC7B,kBACwC,IAAxCb,EAAMY,QAAQC,QAAQ,aAClB,eACA,eAEPb,EAAMY,SAEXX,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,QAAMW,MAAO,CAACC,MAAO,SAAUf,EAAMgB,WAAhD,kBAAiFhB,EAAMiB,cCTpFC,EAFG,SAAAlB,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMmB,WCM9CC,EANA,SAAApB,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKkB,MAAM,gCACXpB,EAAAC,EAAAC,cAAA,QAAMkB,MAAM,wBAAZ,iBCiFWC,6MA5EbC,MAAQ,CACNX,QAAS,gCACTI,UAAW,EACXC,UAAW,EACXO,KAAMA,EACNC,eAAgBD,KAOlBE,aAAe,SAAAC,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADCM,EAElB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkCM,EAAA,GAE9BP,EAAMG,GAFwBI,EAAA,OAM7C5B,UAAY,SAAAC,GAGV,QAAgB4B,IAFAC,EAAKb,MAAME,eAAeY,KAAK,SAAAC,GAAI,OAAIA,EAAK/B,QAAUA,IAIpE6B,EAAKG,SAAS,CACZ3B,QAAS,6BACTK,UAAYmB,EAAKb,MAAMP,UAAYoB,EAAKb,MAAMN,UAAamB,EAAKb,MAAMP,UAAYoB,EAAKb,MAAMN,UAC7FD,UAAW,EACXQ,KAAMA,EACNC,eAAgBD,QAGf,CAEH,IAAMgB,EAAUJ,EAAKb,MAAME,eAAegB,OAAO,SAAAC,GAAI,OAAIA,EAAKnC,QAAUA,IAExE6B,EAAKG,SAAS,CACZ3B,QAAS,2BACTI,UAAWoB,EAAKb,MAAMP,UAAY,EAClCQ,KAAMA,EACNC,eAAgBe,IAIpBJ,EAAKV,aAAaF,yHAKX,IAAAmB,EAAAC,KACP,OACD3C,EAAAC,EAAAC,cAAC0C,EAAD,KACE5C,EAAAC,EAAAC,cAAC2C,EAAD,MACG7C,EAAAC,EAAAC,cAAC4C,EAAD,CACAnC,QAASgC,KAAKrB,MAAMX,QACnBI,UAAW4B,KAAKrB,MAAMP,UACrBC,UAAW2B,KAAKrB,MAAMN,YAItB2B,KAAKrB,MAAMC,KAAKwB,IAAI,SAAAxB,GAAI,OACtBvB,EAAAC,EAAAC,cAAC8C,EAAD,CACE1C,MAAOiB,EAAKjB,MACZG,MAAOc,EAAKd,MACZJ,UAAWqC,EAAKrC,UAChBU,UAAW2B,EAAKpB,MAAMP,sBAlElBkC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b61c5396.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport \"./cows.css\";\n\nconst CowCard = props => (\n    <div className=\"card\">\n        <div className=\"img-container\">\n            <a onClick={() => props.selectCow(props.breed)} \n            >\n                <img className=\"img_fluid\" alt={props.breed} src={props.image} \n                \n                />\n            </a>\n        </div>\n    </div>\n);\n\nexport default CowCard;","import React from \"react\";\n\nconst UserInfo = props => (\n    <div>\n        <ul className=\"nav nav-pills nav-justified\">\n            <li\n                className={props.message.indexOf('incorrectly') !== -1 ? \n                    \"desc-incorrect\" : \n                    props.message.indexOf('correctly') !== -1 ?\n                        \"desc-correct\" :\n                        \"desc-normal\"}\n            >\n                {props.message}\n            </li>\n            <li>Score: <span style={{color: \"blue\"}}>{props.yourScore}</span> | High Score: {props.highScore}</li>\n        </ul>\n    </div>\n);\n\nexport default UserInfo;\n","\nimport React from \"react\";\n\nconst Container = props => <div className=\"Container\">{props.children}</div>;\n\nexport default Container;","\nimport React from \"react\";\n\nconst NavBar = props => (\n    <nav class=\"navbar navbar-light bg-light\">\n    <span class=\"navbar-brand mb-0 h1\">Clicky Game</span>\n  </nav> \n);\n\nexport default NavBar;","import React, { Component } from 'react';\n//import './App.css';\nimport CowCard from \"./components/cowcard/CowCard\";\nimport cows from \"./cows.json\"\nimport UserInfo from './components/UserInfo/UserInfo';\nimport Container from \"./components/Container/Container\"\nimport NavBar from \"./components/Navbar/Navbar\"\n\n\nclass App extends Component {\n  state = {\n    message: \"Click on a picture to begin |\",\n    yourScore: 0,\n    highScore: 0,\n    cows: cows,\n    unselectedCows: cows\n  }\n\n  componentDidMount() {\n  }\n\n  //goes through the array of cows imported via the cows.json file and randomizes their order\n  shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  selectCow = breed => {\n    const findCow = this.state.unselectedCows.find(item => item.breed === breed);\n\n    if (findCow === undefined) {\n      // is your score higher than the current top score?  If yes set your score = top score\n      this.setState({\n        message: \"You guessed incorrectly! |\",\n        highScore: (this.state.yourScore > this.state.highScore) ? this.state.yourScore : this.state.highScore,\n        yourScore: 0,\n        cows: cows,\n        unselectedCows: cows\n      });\n    }\n    else {\n      // failure\n      const newCows = this.state.unselectedCows.filter(type => type.breed !== breed);\n\n      this.setState({\n        message: \"You guessed correctly! |\",\n        yourScore: this.state.yourScore + 1,\n        cows: cows,\n        unselectedCows: newCows\n      });\n    }\n\n    this.shuffleArray(cows);\n  };\n\n\n\n  render() {\n    return (\n   <Container>\n     <NavBar></NavBar>\n        <UserInfo\n        message={this.state.message}\n         yourScore={this.state.yourScore}\n          highScore={this.state.highScore}\n        />\n   \n        {\n          this.state.cows.map(cows => (\n            <CowCard\n              breed={cows.breed}\n              image={cows.image}\n              selectCow={this.selectCow}\n              yourScore={this.state.yourScore}\n            />\n          ))\n        }\n   </Container>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}